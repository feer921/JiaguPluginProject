//import com.android.build.api.variant.impl.VariantOutputImpl
import com.android.build.gradle.api.ApplicationVariant
import com.android.build.gradle.api.BaseVariantOutput
import com.android.build.gradle.internal.api.BaseVariantOutputImpl

import java.text.SimpleDateFormat

//import com.android.build.gradle.tasks.ManifestProcessorTask

plugins {
    id 'com.android.application'
    id 'kotlin-android'
//    id 'com.fee.jiagu'//引用 自定义的插件 该ID名字为 [JiaGuPlugin]->[src->main->resources->[com.fee.jiagu].properties
}
//读取项目根目录下版本控制的keystore.properties文件获取签名信息 ---@start
def keystorePropertiesFile = rootProject.file('keystore.properties')

def keystoreProperties = new Properties()

keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

String storePassWordStr = keystoreProperties['storePassword']

String keyPassWordStr = keystoreProperties['keyPassword']

String keyAliasStr = keystoreProperties['keyAlias']

String keyStoreFile = keystoreProperties['storeFile']
String accountStr = keystoreProperties['platformAccount']
String accountPwStr = keystoreProperties['platformAccountPw']

//jiagu{
//    platformAccount accountStr
//    platformAccountPw accountPwStr
//    platformJarFilePath 'D:\\Program Files (x86)\\jiagu\\jiagu.jar'
//    jiaguOutputDirPath 'D:\\outputs\\test'
//    keyStoreFilePath keyStoreFile//配置自己的签名文件路径
//    keyStorePw storePassWordStr// Key Store库密钥
//    keyStoreKeyAlias keyAliasStr //Key Store 别名
//    keyStoreKeyPw keyPassWordStr //Key的密钥
//    multyChannelsFilePath 'D:\\outputs\\test\\channels-copy.txt'
//}

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.fee.peekgradlesrc"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    applicationVariants.all { ApplicationVariant variant ->
        variant.outputs.forEach { BaseVariantOutputImpl outPut ->
//            TaskProvider<ManifestProcessorTask> provider = outPut.processManifestProvider
//            ManifestProcessorTask manifestProcessorTask = provider.get()
//            //class com.android.build.gradle.tasks.ProcessMultiApkApplicationManifest_Decorated
//            RegularFileProperty fileProperty = manifestProcessorTask.mainMergedManifest
//
//            println " manifestProcessorTask = ${fileProperty.asFile.get()}"//
//            manifestProcessorTask.doLast{
//
//                println " in manifestProcessorTask  ${it}"
//            }
            println "---------------------------- ${variant.name.capitalize()}"
            println "outPut is : $outPut" //ApkVariantOutputImpl
            println "----------------------------"
//            println " provider is ${provider.class}"

//            println it.variantOutput.class//class com.android.build.api.variant.impl.VariantOutputImpl
//            println it.variantOutput.outputFileName.class //class org.gradle.api.internal.provider.DefaultProperty
            def variantOutputImp = outPut.variantOutput
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss")
            Date dateNow = new Date()
            def buildDateInfo = sdf.format(dateNow)
            outPut.outputFileName = "${outPut.name}-${variant.versionName}-${buildDateInfo}" + ".apk"
//            outputFileName.outputFileName.value("dddddd.apk")
//            println " outputFileName value is ${outputFileName.outputFileName}"
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
//    implementation 'androidx.fragment:fragment-ktx:1.2.5'// 只是Fragment的几个类的 kotlin的扩展方法
    implementation 'com.google.android.material:material:1.2.1'
    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}